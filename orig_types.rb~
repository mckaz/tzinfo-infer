RDL.orig_type Object.const_get('TZInfo::Country'), 'self.get', '(String) -> Country', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Country'), 'self.all_codes', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Country'), 'self.all', '() -> Array<Country>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Country'), 'self.data_source', '() -> DataSource', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Country'), 'initialize', '(DataSources::CountryInfo) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Country'), 'code', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Country'), 'name', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Country'), 'to_s', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Country'), 'inspect', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Country'), 'zone_identifiers', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Country'), 'zones', '() -> Array<Timezone>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Country'), 'zone_info', '() -> Array<CountryTimezone>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Country'), '<=>', '(Object) -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Country'), 'eql?', '(Object) -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Country'), 'hash', '() -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Country'), '=~', '(Regexp) -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Country'), '_dump', '(Integer) -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Country'), 'self._load', '(String) -> Country', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'self.default_dst=', '(%bool) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'self.default_dst', '() -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'self.get', '(String) -> Timezone', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'self.get_proxy', '(String) -> TimezoneProxy', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'self.all', '() -> Array<Timezone>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'self.all_identifiers', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'self.all_data_zones', '() -> Array<Timezone>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'self.all_data_zone_identifiers', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'self.all_linked_zones', '() -> Array<Timezone>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'self.all_linked_zone_identifiers', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'self.all_country_zones', '() -> Array<Timezone>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'self.all_country_zone_identifiers', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'self.get_proxies', '(Enumerable<String>) -> Array<TimezoneProxy>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'self.data_source', '() -> DataSource', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'identifier', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'name', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'to_s', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'inspect', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'friendly_identifier', '(%bool) -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'period_for', '(Object) -> TimezonePeriod', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'periods_for_local', '(Object) -> Array<TimezonePeriod>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'transitions_up_to', '(Object, Object) -> Array<TimezoneTransition>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'canonical_zone', '() -> Timezone', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'period_for_utc', '(Object) -> TimezonePeriod', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'period_for_local', '(Object, %bool) -> TimezonePeriod', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'to_local', '(Object) -> Object', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'utc_to_local', '(Object) -> Object', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'local_to_utc', '(Object, %bool) -> Object', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'local_time', '(Integer, Integer, Integer, Integer, Integer, Integer, Numeric, %bool) -> TimeWithOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'local_datetime', '(Integer, Integer, Integer, Integer, Integer, Integer, Numeric, %bool) -> DateTimeWithOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'local_timestamp', '(Integer, Integer, Integer, Integer, Integer, Integer, Numeric, %bool) -> TimestampWithOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'offsets_up_to', '(Object, Object) -> Array<TimezoneOffsets>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'canonical_identifier', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'now', '() -> TimeWithOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'current_period', '() -> TimezonePeriod', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'current_time_and_period', '() -> Array', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'strftime', '(String, Object) -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'abbreviation', '(Object) -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'dst?', '(Object) -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'base_utc_offset', '(Object) -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'observed_utc_offset', '(Object) -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), '<=>', '(Object) -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'eql?', '(Object) -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'hash', '() -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), '=~', '(Regexp) -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), '_dump', '(Integer) -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'self._load', '(String) -> Timezone', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timezone'), 'raise_unknown_timezone', '() -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'self.create', '(Integer, Integer, Integer, Integer, Integer, Integer, Numeric, Object) -> Timestamp', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'self.for', '(Object, Symbol) -> Object', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'self.utc', '(Integer, Numeric) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'self.new!', '(Integer, Numeric, Object) -> Timestamp', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'self.for_time', '(Time, %bool, Object) -> Timestamp', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'self.for_datetime', '(DateTime, %bool, Object) -> Timestamp', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'self.for_timestamp', '(Timestamp, %bool, Object) -> Timestamp', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'self.is_time_like?', '(Object) -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'self.for_time_like', '(Object, %bool, Object) -> Timestamp', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'initialize', '(Integer, Numeric, Object) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'utc?', '() -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'add_and_set_utc_offset', '(Integer, Object) -> Timestamp', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'utc', '() -> Timestamp', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'to_time', '() -> Time', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'to_datetime', '() -> DateTime', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'to_i', '() -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'strftime', '(String) -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'to_s', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), '<=>', '(Timestamp) -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'hash', '() -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'inspect', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'new_time', '(Class) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'new_datetime', '(Class) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'value_and_sub_second_to_s', '(Integer) -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'sub_second_to_s', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Timestamp'), 'initialize!', '(Integer, Numeric, Object) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'self.get', '() -> DataSource', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'self.set', '(Object, Array<Object>) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'self.create_default_data_source', '() -> DataSource', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'initialize', '() -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'get_timezone_info', '(String) -> DataSources::TimezoneInfo', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'timezone_identifiers', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'data_timezone_identifiers', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'linked_timezone_identifiers', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'get_country_info', '(String) -> DataSources::CountryInfo', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'country_codes', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'to_s', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'inspect', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'load_timezone_info', '(String) -> DataSources::TimezoneInfo', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'load_country_info', '(String) -> DataSources::CountryInfo', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'timezone_identifier_encoding', '() -> Encoding', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'validate_timezone_identifier', '(String) -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'lookup_country_info', '(String or DataSources::CountryInfo, String, Encoding) -> DataSources::CountryInfo', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'raise_invalid_data_source', '() -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'build_timezone_identifiers', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'find_timezone_identifier', '(String) -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSource'), 'try_with_encoding', '(String, Encoding) -> Object', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::WithOffset'), 'strftime', '(String) -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::WithOffset'), 'if_timezone_offset', '(Object) -> Object', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataTimezone'), 'period_for', '(Object) -> TimezonePeriod', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataTimezone'), 'periods_for_local', '(Object) -> Array<TimezonePeriod>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataTimezone'), 'transitions_up_to', '(Object, Object) -> Array<TimezoneTransition>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataTimezone'), 'canonical_zone', '() -> Timezone', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::InfoTimezone'), 'initialize', '(DataSources::TimezoneInfo) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::InfoTimezone'), 'identifier', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::InfoTimezone'), 'info', '() -> DataSources::TimezoneInfo', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::StringDeduper'), 'initialize', '() -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::StringDeduper'), 'dedupe', '(String) -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::StringDeduper'), 'create_hash', '(Proc) -> Hash', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::ConcurrentStringDeduper'), 'create_hash', '() -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::UnaryMinusGlobalStringDeduper'), 'dedupe', '(String) -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneProxy'), 'initialize', '(String) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneProxy'), 'identifier', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneProxy'), 'period_for', '(Object) -> TimezonePeriod', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneProxy'), 'periods_for_local', '(Object) -> Array<TimezonePeriod>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneProxy'), 'transitions_up_to', '(Object, Object) -> Array<TimezoneTransition>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneProxy'), 'canonical_zone', '() -> Timezone', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneProxy'), '_dump', '(Integer) -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneProxy'), 'self._load', '(String) -> TimezoneProxy', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneProxy'), 'real_timezone', '() -> Timezone', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::LinkedTimezone'), 'initialize', '(DataSources::LinkedTimezoneInfo) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::LinkedTimezone'), 'period_for', '(Object) -> TimezonePeriod', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::LinkedTimezone'), 'periods_for_local', '(Object) -> Array<TimezonePeriod>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::LinkedTimezone'), 'transitions_up_to', '(Object, Object) -> Array<TimezoneTransition>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::LinkedTimezone'), 'canonical_zone', '() -> Timezone', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneOffset'), 'initialize', '(Integer, Integer, String) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneOffset'), 'dst?', '() -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneOffset'), '==', '(Object) -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneOffset'), 'eql?', '(Object) -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneOffset'), 'hash', '() -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneOffset'), 'inspect', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezonePeriod'), 'initialize', '(TimezoneOffset) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezonePeriod'), 'start_transition', '() -> TimezoneTransition', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezonePeriod'), 'end_transition', '() -> TimezoneTransition', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezonePeriod'), 'base_utc_offset', '() -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezonePeriod'), 'std_offset', '() -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezonePeriod'), 'abbreviation', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezonePeriod'), 'observed_utc_offset', '() -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezonePeriod'), 'dst?', '() -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezonePeriod'), 'starts_at', '() -> Timestamp', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezonePeriod'), 'ends_at', '() -> Timestamp', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezonePeriod'), 'local_starts_at', '() -> TimestampWithOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezonePeriod'), 'local_ends_at', '() -> TimestampWithOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezonePeriod'), 'raise_not_implemented', '() -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezonePeriod'), 'timestamp', '(TimezoneTransition) -> Timestamp', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezonePeriod'), 'timestamp_with_offset', '(TimezoneTransition) -> TimestampWithOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::CountryTimezone'), 'initialize', '(String, Rational, Rational, String) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::CountryTimezone'), 'timezone', '() -> Timezone', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::CountryTimezone'), 'description_or_friendly_identifier', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::CountryTimezone'), '==', '(Object) -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::CountryTimezone'), 'eql?', '(Object) -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::CountryTimezone'), 'hash', '() -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimeWithOffset'), 'set_timezone_offset', '(TimezoneOffset) -> TimeWithOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimeWithOffset'), 'dst?', '() -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimeWithOffset'), 'gmtime', '() -> TimeWithOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimeWithOffset'), 'localtime', '() -> TimeWithOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimeWithOffset'), 'round', '() -> Time', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimeWithOffset'), 'to_a', '() -> Array', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimeWithOffset'), 'utc', '() -> TimeWithOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimeWithOffset'), 'zone', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimeWithOffset'), 'to_datetime', '() -> DateTime', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneTransition'), 'initialize', '(TimezoneOffset, TimezoneOffset, Integer) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneTransition'), 'at', '() -> Timestamp', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneTransition'), 'local_end_at', '() -> TimestampWithOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneTransition'), 'local_start_at', '() -> TimestampWithOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneTransition'), '==', '(Object) -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimezoneTransition'), 'hash', '() -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DateTimeWithOffset'), 'set_timezone_offset', '(TimezoneOffset) -> DateTimeWithOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DateTimeWithOffset'), 'to_time', '() -> Time', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DateTimeWithOffset'), 'downto', '() -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DateTimeWithOffset'), 'england', '() -> DateTime', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DateTimeWithOffset'), 'gregorian', '() -> DateTime', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DateTimeWithOffset'), 'italy', '() -> DateTime', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DateTimeWithOffset'), 'julian', '() -> DateTime', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DateTimeWithOffset'), 'new_start', '() -> DateTime', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DateTimeWithOffset'), 'step', '() -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DateTimeWithOffset'), 'upto', '() -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DateTimeWithOffset'), 'clear_timezone_offset', '() -> DateTimeWithOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimestampWithOffset'), 'self.set_timezone_offset', '(Timestamp, TimezoneOffset) -> TimestampWithOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimestampWithOffset'), 'set_timezone_offset', '(TimezoneOffset) -> TimestampWithOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimestampWithOffset'), 'to_time', '() -> Time', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TimestampWithOffset'), 'to_datetime', '() -> DateTime', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::OffsetTimezonePeriod'), 'initialize', '(TimezoneOffset) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::OffsetTimezonePeriod'), 'start_transition', '() -> TimezoneTransition', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::OffsetTimezonePeriod'), 'end_transition', '() -> TimezoneTransition', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::OffsetTimezonePeriod'), '==', '(Object) -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::OffsetTimezonePeriod'), 'hash', '() -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format1::CountryDefiner'), 'initialize', '() -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::CountryDefiner'), 'initialize', '(Hash<Symbol, CountryTimezone>, StringDeduper, StringDeduper) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::CountryDefiner'), 'timezone', '() -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format1::TimezoneDefiner'), 'offset', '(Symbol, Integer, Integer, Symbol) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format1::TimezoneDefiner'), 'transition', '(Integer, Integer, Symbol, Integer, Integer, Integer) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::TimezoneDefiner'), 'initialize', '(StringDeduper) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::TimezoneDefiner'), 'first_offset', '() -> TimezoneOffset', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::TimezoneDefiner'), 'offset', '(Symbol, Integer, Integer, String) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::TimezoneDefiner'), 'transition', '(Symbol, Integer) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::TimezoneDefiner'), 'subsequent_rules', '() -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::CountryInfo'), 'initialize', '(String, String, Array<CountryTimezone>) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::CountryInfo'), 'inspect', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::TimezoneInfo'), 'initialize', '(String) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::TimezoneInfo'), 'inspect', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::TimezoneInfo'), 'create_timezone', '() -> Timezone', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::TimezoneInfo'), 'raise_not_implemented', '(String) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format1::TimezoneDefinition'), 'self.append_features', '(Module) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format1::TimezoneDefinition::ClassMethods'), 'timezone_definer_class', '() -> ', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::TimezoneDefinition'), 'self.append_features', '(Module) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::TimezoneDefinition::ClassMethods'), 'get', '() -> TimezoneInfo', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::TimezoneDefinition::ClassMethods'), 'timezone_definer_class', '() -> Class', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::TimezoneDefinition::ClassMethods'), 'timezone', '(String) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::TimezoneDefinition::ClassMethods'), 'linked_timezone', '(String, String) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TransitionsTimezonePeriod'), 'initialize', '(TimezoneTransition, TimezoneTransition) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TransitionsTimezonePeriod'), '==', '(Object) -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TransitionsTimezonePeriod'), 'hash', '() -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::TransitionsTimezonePeriod'), 'inspect', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoReader'), 'initialize', '(StringDeduper) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoReader'), 'read', '(String) -> Object', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoReader'), 'make_signed_int32', '(Integer) -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoReader'), 'make_signed_int64', '(Integer, Integer) -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoReader'), 'check_read', '(IO, Integer) -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoReader'), 'derive_offsets', '(Array<Hash>, Array<Hash>) -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoReader'), 'parse', '(IO) -> Object', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::RubyDataSource'), 'initialize', '() -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::RubyDataSource'), 'to_s', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::RubyDataSource'), 'inspect', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::RubyDataSource'), 'load_timezone_info', '(String) -> TimezoneInfo', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::RubyDataSource'), 'load_country_info', '(String) -> DataSources::CountryInfo', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::RubyDataSource'), 'require_definition', '(Array<string>) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::RubyDataSource'), 'require_index', '(String) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::RubyDataSource'), 'require_data', '(Array<String>) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::RubyDataSource'), 'version_info', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::CountryIndexDefiner'), 'initialize', '(StringDeduper, StringDeduper) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::CountryIndexDefiner'), 'timezone', '(Symbol, String, Integer, Integer, Integer, Integer, String) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::CountryIndexDefiner'), 'country', '(String, String) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::TimezoneIndexDefiner'), 'initialize', '(StringDeduper) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::TimezoneIndexDefiner'), 'data_timezone', '(String) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::TimezoneIndexDefiner'), 'linked_timezone', '(String) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::DataTimezoneInfo'), 'period_for', '(Timestamp) -> TimezonePeriod', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::DataTimezoneInfo'), 'periods_for_local', '(Timestamp) -> Array<TimezonePeriod>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::DataTimezoneInfo'), 'transitions_up_to', '(Timestamp, Timestamp) -> Array<TimezoneTransition>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::DataTimezoneInfo'), 'create_timezone', '() -> DataTimezone', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::DataTimezoneInfo'), 'raise_not_implemented', '() -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format1::CountryIndexDefinition'), 'self.append_features', '(Module) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format1::CountryIndexDefinition::ClassMethods'), 'countries', '() -> Hash<String, DataSources::CountryInfo>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format1::CountryIndexDefinition::ClassMethods'), 'country', '(String, String) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::CountryIndexDefinition'), 'self.append_features', '(Module) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::CountryIndexDefinition::ClassMethods'), 'country_index', '() -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::LinkedTimezoneInfo'), 'initialize', '(String, String) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::LinkedTimezoneInfo'), 'create_timezone', '() -> LinkedTimezone', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'self.search_path', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'self.search_path=', '(Object) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'self.alternate_iso3166_tab_search_path', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'self.alternate_iso3166_tab_search_path=', '(Object) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'self.process_search_path', '(Object, Array<String>) -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'initialize', '(String, String) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'data_timezone_identifiers', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'linked_timezone_identifiers', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'to_s', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'inspect', '() -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'load_timezone_info', '(String) -> TimezoneInfo', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'load_country_info', '(String) -> DataSources::CountryInfo', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'validate_zoneinfo_dir', '(String, String) -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'resolve_tab_path', '(String, Array<String>, String) -> String', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'find_zoneinfo_dir', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'load_timezone_identifiers', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'enum_timezones', '(Array<String>, Array<String>) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'load_countries', '(String, String) -> Hash<String, CountryInfo>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ZoneinfoDataSource'), 'dms_to_rational', '(String, String, String, String) -> Rational', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format1::TimezoneIndexDefinition'), 'self.append_features', '(Module) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format1::TimezoneIndexDefinition::ClassMethods'), 'data_timezones', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format1::TimezoneIndexDefinition::ClassMethods'), 'linked_timezones', '() -> Array<String>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format1::TimezoneIndexDefinition::ClassMethods'), 'timezone', '(String) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format1::TimezoneIndexDefinition::ClassMethods'), 'linked_timezone', '(String) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::TimezoneIndexDefinition'), 'self.append_features', '(Module) -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::Format2::TimezoneIndexDefinition::ClassMethods'), 'timezone_index', '() -> %bot', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::TransitionsDataTimezoneInfo'), 'initialize', '(String, Array<TimezoneTransitions>) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::TransitionsDataTimezoneInfo'), 'period_for', '(Timestamp) -> TimezonePeriod', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::TransitionsDataTimezoneInfo'), 'periods_for_local', '(Timestamp) -> Array<TimezonePeriod>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::TransitionsDataTimezoneInfo'), 'transitions_up_to', '(Timestamp, Timestamp) -> Array<TimezoneTransition>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::TransitionsDataTimezoneInfo'), 'find_minimum_transition', '() -> Integer', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::TransitionsDataTimezoneInfo'), 'transition_on_or_after_timestamp?', '(TimezoneTransition, Timestamp) -> %bool', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ConstantOffsetDataTimezoneInfo'), 'initialize', '(String, TimezoneOffset) -> self', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ConstantOffsetDataTimezoneInfo'), 'period_for', '(Timestamp) -> TimezonePeriod', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ConstantOffsetDataTimezoneInfo'), 'periods_for_local', '(Timestamp) -> Array<TimezonePeriod>', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ConstantOffsetDataTimezoneInfo'), 'transitions_up_to', '(Timestamp, Timestamp) -> Array', wrap: false, typecheck: :later
RDL.orig_type Object.const_get('TZInfo::DataSources::ConstantOffsetDataTimezoneInfo'), 'constant_period', '() -> TimezonePeriod', wrap: false, typecheck: :later
